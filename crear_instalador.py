#!/usr/bin/env python3
"""
Creador de Instalador para Planificador Inteligente
==================================================

Este script crea un instalador completo para el Planificador Inteligente
"""

import os
import shutil
import zipfile
from pathlib import Path
import json
from datetime import datetime

def crear_instalador():
    """Crea el paquete instalador completo"""
    
    print("üöÄ Creando instalador del Planificador Inteligente...")
    
    # Configuraci√≥n
    version = "1.0.0"
    nombre_producto = "Planificador_Inteligente"
    fecha_build = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Directorios
    base_dir = Path(__file__).parent
    dist_dir = base_dir / "dist"
    build_dir = base_dir / "installer_build"
    
    # Limpiar build anterior
    if build_dir.exists():
        shutil.rmtree(build_dir)
    
    build_dir.mkdir(parents=True, exist_ok=True)
    
    # Crear estructura del instalador
    app_dir = build_dir / nombre_producto
    app_dir.mkdir(parents=True, exist_ok=True)
    
    print("üì¶ Copiando archivos...")
    
    # Copiar ejecutable
    exe_source = dist_dir / "PlanificadorInteligente.exe"
    exe_dest = app_dir / "PlanificadorInteligente.exe"
    
    if exe_source.exists():
        shutil.copy2(exe_source, exe_dest)
        print(f"‚úÖ Ejecutable copiado: {exe_dest}")
    else:
        print("‚ùå Error: No se encontr√≥ el ejecutable")
        return False
    
    # Copiar documentaci√≥n
    docs_a_copiar = [
        "README.md",
        "README_USUARIO.md",
        "GUIA_INTEGRACION_EXCEL.md",
        "ESTADO_PRODUCCION.md",
        "NOTAS_VERSION.md"
    ]
    
    docs_dir = app_dir / "docs"
    docs_dir.mkdir(exist_ok=True)
    
    for doc in docs_a_copiar:
        source = base_dir / doc
        if source.exists():
            shutil.copy2(source, docs_dir / doc)
            print(f"‚úÖ Documentaci√≥n copiada: {doc}")
    
    # Crear archivo de configuraci√≥n
    config = {
        "version": version,
        "nombre": "Planificador Inteligente",
        "descripcion": "Sistema de planificaci√≥n inteligente con procesamiento de Excel",
        "autor": "Sistema de Planificaci√≥n IA",
        "fecha_build": fecha_build,
        "archivos": {
            "ejecutable": "PlanificadorInteligente.exe",
            "documentacion": "docs/",
            "plantilla_excel": "plantilla_planificacion.xlsx"
        }
    }
    
    config_file = app_dir / "config.json"
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Configuraci√≥n creada")
    
    # Crear plantilla de Excel
    crear_plantilla_excel(app_dir)
    
    # Crear script de instalaci√≥n
    crear_script_instalacion(app_dir)
    
    # Crear archivo batch para ejecutar
    crear_batch_ejecutor(app_dir)
    
    # Crear archivo de desinstalaci√≥n
    crear_desinstalador(app_dir)
    
    # Crear archivo README del instalador
    crear_readme_instalador(app_dir)
    
    # Crear archivo ZIP del instalador
    zip_filename = f"{nombre_producto}_v{version}_{fecha_build}.zip"
    zip_path = build_dir / zip_filename
    
    print("üì¶ Creando archivo ZIP...")
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(app_dir):
            for file in files:
                file_path = Path(root) / file
                arcname = file_path.relative_to(app_dir)
                zipf.write(file_path, arcname)
    
    print(f"‚úÖ Instalador creado: {zip_path}")
    print(f"üìä Tama√±o: {zip_path.stat().st_size / (1024*1024):.1f} MB")
    
    return True

def crear_plantilla_excel(app_dir):
    """Crea una plantilla de Excel b√°sica"""
    try:
        import openpyxl
        from openpyxl.styles import Font, PatternFill, Alignment
        
        # Crear nuevo workbook
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Planificaci√≥n"
        
        # Encabezados
        headers = [
            "ID_Proceso", "Nombre_Proceso", "Descripcion", "Prioridad",
            "Tiempo_Estimado", "Recursos_Necesarios", "Fecha_Inicio",
            "Fecha_Limite", "Estado", "Observaciones"
        ]
        
        # Estilo de encabezados
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # Escribir encabezados
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # Datos de ejemplo
        datos_ejemplo = [
            ["PROC001", "An√°lisis de Datos", "Procesamiento inicial de datos", "Alta", 
             "4 horas", "Analista,Servidor", "2024-01-15", "2024-01-20", "Pendiente", "Urgente"],
            ["PROC002", "Generaci√≥n de Reportes", "Crear reportes mensuales", "Media", 
             "2 horas", "Analista", "2024-01-16", "2024-01-25", "En Proceso", ""],
            ["PROC003", "Validaci√≥n de Resultados", "Verificar exactitud", "Alta", 
             "3 horas", "Supervisor", "2024-01-18", "2024-01-22", "Pendiente", "Revisar criterios"]
        ]
        
        # Escribir datos de ejemplo
        for row, datos in enumerate(datos_ejemplo, 2):
            for col, dato in enumerate(datos, 1):
                ws.cell(row=row, column=col, value=dato)
        
        # Ajustar ancho de columnas
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # Guardar archivo
        plantilla_path = app_dir / "plantilla_planificacion.xlsx"
        wb.save(plantilla_path)
        
        print("‚úÖ Plantilla Excel creada")
        
    except ImportError:
        print("‚ö†Ô∏è No se pudo crear la plantilla Excel (openpyxl no disponible)")
        # Crear archivo de texto alternativo
        plantilla_path = app_dir / "plantilla_planificacion.txt"
        with open(plantilla_path, 'w', encoding='utf-8') as f:
            f.write("Plantilla de Planificaci√≥n - Use Excel para mejor experiencia\n")
            f.write("=" * 50 + "\n\n")
            f.write("Columnas requeridas:\n")
            f.write("- ID_Proceso\n")
            f.write("- Nombre_Proceso\n")
            f.write("- Descripcion\n")
            f.write("- Prioridad (Alta/Media/Baja)\n")
            f.write("- Tiempo_Estimado\n")
            f.write("- Recursos_Necesarios\n")
            f.write("- Fecha_Inicio\n")
            f.write("- Fecha_Limite\n")
            f.write("- Estado\n")
            f.write("- Observaciones\n")

def crear_script_instalacion(app_dir):
    """Crea script de instalaci√≥n para Windows"""
    
    script_content = '''@echo off
echo ====================================
echo   Planificador Inteligente v1.0.0
echo   Instalador Automatico
echo ====================================
echo.

echo Creando directorio de instalacion...
set "INSTALL_DIR=%USERPROFILE%\\PlanificadorInteligente"
if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"

echo Copiando archivos...
copy /Y "PlanificadorInteligente.exe" "%INSTALL_DIR%\\"
copy /Y "config.json" "%INSTALL_DIR%\\"
copy /Y "plantilla_planificacion.*" "%INSTALL_DIR%\\"

echo Copiando documentacion...
if not exist "%INSTALL_DIR%\\docs" mkdir "%INSTALL_DIR%\\docs"
copy /Y "docs\\*" "%INSTALL_DIR%\\docs\\"

echo Creando acceso directo en el escritorio...
set "DESKTOP=%USERPROFILE%\\Desktop"
echo Set WshShell = WScript.CreateObject("WScript.Shell") > "%TEMP%\\shortcut.vbs"
echo Set Shortcut = WshShell.CreateShortcut("%DESKTOP%\\Planificador Inteligente.lnk") >> "%TEMP%\\shortcut.vbs"
echo Shortcut.TargetPath = "%INSTALL_DIR%\\PlanificadorInteligente.exe" >> "%TEMP%\\shortcut.vbs"
echo Shortcut.WorkingDirectory = "%INSTALL_DIR%" >> "%TEMP%\\shortcut.vbs"
echo Shortcut.Description = "Planificador Inteligente - Sistema de Planificacion" >> "%TEMP%\\shortcut.vbs"
echo Shortcut.Save >> "%TEMP%\\shortcut.vbs"
cscript //nologo "%TEMP%\\shortcut.vbs"
del "%TEMP%\\shortcut.vbs"

echo.
echo ====================================
echo   Instalacion completada!
echo ====================================
echo.
echo El programa se ha instalado en: %INSTALL_DIR%
echo Se ha creado un acceso directo en el escritorio.
echo.
echo Para ejecutar el programa:
echo - Haga doble clic en el acceso directo del escritorio
echo - O navegue a %INSTALL_DIR% y ejecute PlanificadorInteligente.exe
echo.
pause
'''
    
    script_path = app_dir / "instalar.bat"
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("‚úÖ Script de instalaci√≥n creado")

def crear_batch_ejecutor(app_dir):
    """Crea archivo batch para ejecutar f√°cilmente"""
    
    batch_content = '''@echo off
title Planificador Inteligente
echo Iniciando Planificador Inteligente...
echo.
start "" "PlanificadorInteligente.exe"
'''
    
    batch_path = app_dir / "Ejecutar_Planificador.bat"
    with open(batch_path, 'w', encoding='utf-8') as f:
        f.write(batch_content)
    
    print("‚úÖ Ejecutor batch creado")

def crear_desinstalador(app_dir):
    """Crea script de desinstalaci√≥n"""
    
    uninstall_content = '''@echo off
echo ====================================
echo   Planificador Inteligente v1.0.0
echo   Desinstalador
echo ====================================
echo.

set "INSTALL_DIR=%USERPROFILE%\\PlanificadorInteligente"
set "DESKTOP=%USERPROFILE%\\Desktop"

echo ¬øEst√° seguro que desea desinstalar el Planificador Inteligente?
pause

echo Eliminando archivos...
if exist "%INSTALL_DIR%" (
    rmdir /S /Q "%INSTALL_DIR%"
    echo Archivos eliminados.
) else (
    echo No se encontraron archivos de instalaci√≥n.
)

echo Eliminando acceso directo...
if exist "%DESKTOP%\\Planificador Inteligente.lnk" (
    del "%DESKTOP%\\Planificador Inteligente.lnk"
    echo Acceso directo eliminado.
)

echo.
echo ====================================
echo   Desinstalaci√≥n completada
echo ====================================
echo.
pause
'''
    
    uninstall_path = app_dir / "desinstalar.bat"
    with open(uninstall_path, 'w', encoding='utf-8') as f:
        f.write(uninstall_content)
    
    print("‚úÖ Desinstalador creado")

def crear_readme_instalador(app_dir):
    """Crea README para el instalador"""
    
    readme_content = '''# üöÄ Planificador Inteligente - Instalador

## üìã Contenido del Paquete

Este paquete contiene todo lo necesario para instalar y usar el Planificador Inteligente:

### üìÅ Archivos Incluidos
- `PlanificadorInteligente.exe` - Aplicaci√≥n principal
- `instalar.bat` - Script de instalaci√≥n autom√°tica
- `Ejecutar_Planificador.bat` - Ejecutor directo
- `desinstalar.bat` - Script de desinstalaci√≥n
- `config.json` - Configuraci√≥n del sistema
- `plantilla_planificacion.xlsx` - Plantilla de Excel
- `docs/` - Documentaci√≥n completa

## üîß Instalaci√≥n

### Opci√≥n 1: Instalaci√≥n Autom√°tica (Recomendada)
1. Extraer todos los archivos a una carpeta
2. Ejecutar `instalar.bat` como administrador
3. Seguir las instrucciones en pantalla
4. Usar el acceso directo creado en el escritorio

### Opci√≥n 2: Instalaci√≥n Manual
1. Extraer archivos a la carpeta deseada
2. Ejecutar `PlanificadorInteligente.exe` directamente
3. Crear acceso directo manualmente si es necesario

## üìä Uso del Sistema

### Primeros Pasos
1. Abrir el Planificador Inteligente
2. Descargar la plantilla de Excel
3. Llenar los datos en Excel
4. Cargar el archivo en el sistema
5. Procesar y obtener resultados

### Funcionalidades Principales
- ‚úÖ Procesamiento de archivos Excel
- ‚úÖ An√°lisis inteligente de procesos
- ‚úÖ Optimizaci√≥n de recursos
- ‚úÖ Generaci√≥n de reportes
- ‚úÖ Interfaz gr√°fica amigable
- ‚úÖ Exportaci√≥n de resultados

## üõ†Ô∏è Requisitos del Sistema

- **Sistema Operativo**: Windows 10 o superior
- **Memoria RAM**: 4 GB m√≠nimo (8 GB recomendado)
- **Espacio en Disco**: 500 MB disponibles
- **Software**: Microsoft Excel (opcional, para mejor experiencia)

## üìû Soporte

### Documentaci√≥n
- Ver carpeta `docs/` para documentaci√≥n completa
- `README_USUARIO.md` - Gu√≠a de usuario
- `GUIA_INTEGRACION_EXCEL.md` - Gu√≠a de Excel

### Resoluci√≥n de Problemas
1. Verificar que Windows Defender no bloquee la aplicaci√≥n
2. Ejecutar como administrador si es necesario
3. Verificar que los archivos est√©n completos
4. Consultar los logs de error en caso de problemas

## üîÑ Desinstalaci√≥n

Para desinstalar el programa:
1. Ejecutar `desinstalar.bat`
2. Confirmar la desinstalaci√≥n
3. Los archivos y accesos directos ser√°n eliminados

## üìà Versi√≥n

**Versi√≥n**: 1.0.0
**Fecha**: 2024
**Estado**: Producci√≥n

## üèÜ Caracter√≠sticas

- **Multiplataforma**: Funciona en Windows
- **Sin dependencias**: No requiere Python instalado
- **Interfaz intuitiva**: F√°cil de usar
- **Procesamiento r√°pido**: Optimizado para rendimiento
- **Documentaci√≥n completa**: Gu√≠as y manuales incluidos

¬°Gracias por usar el Planificador Inteligente! üöÄ
'''
    
    readme_path = app_dir / "LEEME_INSTALADOR.md"
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("‚úÖ README del instalador creado")

if __name__ == "__main__":
    try:
        if crear_instalador():
            print("\nüéâ ¬°Instalador creado exitosamente!")
            print("El archivo ZIP est√° listo para distribuir.")
        else:
            print("\n‚ùå Error al crear el instalador.")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        input("Presione Enter para continuar...")
